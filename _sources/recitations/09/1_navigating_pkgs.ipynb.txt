{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Navigating Packages \n",
    "\n",
    "*This lesson was developed by Rosita Fu based off of work by Patrick Almhjell.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "\n",
    "Before diving in to how packages are made, I think it's important to see how the user-end of things motivates the developer. We'll briefly talk about how to navigate packages and their modules and methods and how soothing docstrings are to users who are new to your package.\n",
    "- In case there's any confusion, a **module** is a file that ends with `.py`. This file contains classes, functions, variables, and other objects.\n",
    "- A **method** is just another name for functions that belong to a particular object, in this case your module and package. \n",
    "- A **package** contains several related modules and are all grouped together under one name. Within those modules are your methods. Some packages you've extensively used involve [Numpy](https://numpy.org/), [Scipy](https://www.scipy.org/), [Pandas](https://pandas.pydata.org/), and [Bokeh](https://docs.bokeh.org/en/latest/). You can find third party packages on [PyPI](https://pypi.org/), and install 'em using [pip](https://pip.pypa.io/en/stable/), the self-referential acronym <u>P</u>ip <u>I</u>nstalls <u>P</u>ackages. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To **access** modules in a package, we have to **import** the name of the package. As your computer reads the import statement, the interpreter stores its contents in memory.  \n",
    "- If you plan on updating your package, your interpreter will not know about those changes, so you'll have to restart the kernel).\n",
    "- If your package is not in Python's Standard Library, you'll have to   `pip install pkg_name` so your machine knows what `pkg_name` is. \n",
    "    - When developing modules, this can get annoying. You can use the magic function and autoreload extension to get around this. \n",
    "    \n",
    "    %load_ext autoreload\n",
    "    %autoreload 2\n",
    "    \n",
    "    import pkg_name\n",
    "\n",
    "- Your import statements conventionally go at the top of your file, just after any module comments and docstrings, and before module globals and constants. For the sake of this discussion, things will be a little out of order. But generally, they should be grouped in the following order, with a blank line in between each group: \n",
    "    1. standard library imports\n",
    "    2. related third party imports\n",
    "    3. local application/library specific imports\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I'll be using my own package [chromatose](https://github.com/atisor73/chromatose) for reference since there are only two modules [palettes.py](https://github.com/atisor73/chromatose/blob/master/chromatose/palettes.py) and [viz.py](https://github.com/atisor73/chromatose/blob/master/chromatose/viz.py) and structurally contains the bare minimum for a functioning package. The simplicity makes it a little easier to navigate than giant libraries like numpy. \n",
    "You can `pip install chromatose` in terminal, or just follow along."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"1001\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  var JS_MIME_TYPE = 'application/javascript';\n",
       "  var HTML_MIME_TYPE = 'text/html';\n",
       "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    var script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    var cell = handle.cell;\n",
       "\n",
       "    var id = cell.output_area._bokeh_element_id;\n",
       "    var server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id != null && id in Bokeh.index) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            var id = msg.content.text.trim();\n",
       "            if (id in Bokeh.index) {\n",
       "              Bokeh.index[id].model.document.clear();\n",
       "              delete Bokeh.index[id];\n",
       "            }\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    var output_area = handle.output_area;\n",
       "    var output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      var bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      var script_attrs = bk_div.children[0].attributes;\n",
       "      for (var i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      var toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    var el = document.getElementById(\"1001\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error() {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < css_urls.length; i++) {\n",
       "      var url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\": \"T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\": \"98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\": \"89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8\"};\n",
       "\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      var element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      if (url in hashes) {\n",
       "        element.crossOrigin = \"anonymous\";\n",
       "        element.integrity = \"sha384-\" + hashes[url];\n",
       "      }\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "  };\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  \n",
       "  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\"];\n",
       "  var css_urls = [];\n",
       "  \n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "    \n",
       "    \n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if (root.Bokeh !== undefined || force === true) {\n",
       "      \n",
       "    for (var i = 0; i < inline_js.length; i++) {\n",
       "      inline_js[i].call(root, root.Bokeh);\n",
       "    }\n",
       "    if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1001\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\": \"T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\": \"98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\": \"89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8\"};\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      if (url in hashes) {\n        element.crossOrigin = \"anonymous\";\n        element.integrity = \"sha384-\" + hashes[url];\n      }\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error() {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < css_urls.length; i++) {\n",
       "      var url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    var skip = [];\n",
       "    if (window.requirejs) {\n",
       "      require([], function() {\n",
       "      })\n",
       "    }\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      if (skip.indexOf(url) >= 0) { on_load(); continue; }\n",
       "      var element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "\tif (!js_urls.length) {\n",
       "      on_load()\n",
       "    }\n",
       "  };\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\", \"https://unpkg.com/@holoviz/panel@^0.10.2/dist/panel.min.js\"];\n",
       "  var css_urls = [\"https://unpkg.com/@holoviz/panel@0.10.2/dist/css/alerts.css\", \"https://unpkg.com/@holoviz/panel@0.10.2/dist/css/card.css\", \"https://unpkg.com/@holoviz/panel@0.10.2/dist/css/widgets.css\", \"https://unpkg.com/@holoviz/panel@0.10.2/dist/css/markdown.css\", \"https://unpkg.com/@holoviz/panel@0.10.2/dist/css/json.css\", \"https://unpkg.com/@holoviz/panel@0.10.2/dist/css/dataframe.css\"];\n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {} // ensure no trailing comma for IE\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    if ((root.Bokeh !== undefined) || (force === true)) {\n",
       "      for (var i = 0; i < inline_js.length; i++) {\n",
       "        inline_js[i].call(root, root.Bokeh);\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    }\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.holoviews_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    var skip = [];\n    if (window.requirejs) {\n      require([], function() {\n      })\n    }\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      if (skip.indexOf(url) >= 0) { on_load(); continue; }\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n\tif (!js_urls.length) {\n      on_load()\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\", \"https://unpkg.com/@holoviz/panel@^0.10.2/dist/panel.min.js\"];\n  var css_urls = [\"https://unpkg.com/@holoviz/panel@0.10.2/dist/css/alerts.css\", \"https://unpkg.com/@holoviz/panel@0.10.2/dist/css/card.css\", \"https://unpkg.com/@holoviz/panel@0.10.2/dist/css/widgets.css\", \"https://unpkg.com/@holoviz/panel@0.10.2/dist/css/markdown.css\", \"https://unpkg.com/@holoviz/panel@0.10.2/dist/css/json.css\", \"https://unpkg.com/@holoviz/panel@0.10.2/dist/css/dataframe.css\"];\n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {} // ensure no trailing comma for IE\n  ];\n\n  function run_inline_js() {\n    if ((root.Bokeh !== undefined) || (force === true)) {\n      for (var i = 0; i < inline_js.length; i++) {\n        inline_js[i].call(root, root.Bokeh);\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    }\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "if ((window.PyViz === undefined) || (window.PyViz instanceof HTMLElement)) {\n",
       "  window.PyViz = {comms: {}, comm_status:{}, kernels:{}, receivers: {}, plot_index: []}\n",
       "}\n",
       "\n",
       "\n",
       "    function JupyterCommManager() {\n",
       "    }\n",
       "\n",
       "    JupyterCommManager.prototype.register_target = function(plot_id, comm_id, msg_handler) {\n",
       "      if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n",
       "        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n",
       "        comm_manager.register_target(comm_id, function(comm) {\n",
       "          comm.on_msg(msg_handler);\n",
       "        });\n",
       "      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n",
       "        window.PyViz.kernels[plot_id].registerCommTarget(comm_id, function(comm) {\n",
       "          comm.onMsg = msg_handler;\n",
       "        });\n",
       "      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n",
       "        google.colab.kernel.comms.registerTarget(comm_id, (comm) => {\n",
       "          var messages = comm.messages[Symbol.asyncIterator]();\n",
       "          function processIteratorResult(result) {\n",
       "            var message = result.value;\n",
       "            console.log(message)\n",
       "            var content = {data: message.data, comm_id};\n",
       "            var buffers = []\n",
       "            for (var buffer of message.buffers || []) {\n",
       "              buffers.push(new DataView(buffer))\n",
       "            }\n",
       "            var metadata = message.metadata || {};\n",
       "            var msg = {content, buffers, metadata}\n",
       "            msg_handler(msg);\n",
       "            return messages.next().then(processIteratorResult);\n",
       "          }\n",
       "          return messages.next().then(processIteratorResult);\n",
       "        })\n",
       "      }\n",
       "    }\n",
       "\n",
       "    JupyterCommManager.prototype.get_client_comm = function(plot_id, comm_id, msg_handler) {\n",
       "      if (comm_id in window.PyViz.comms) {\n",
       "        return window.PyViz.comms[comm_id];\n",
       "      } else if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n",
       "        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n",
       "        var comm = comm_manager.new_comm(comm_id, {}, {}, {}, comm_id);\n",
       "        if (msg_handler) {\n",
       "          comm.on_msg(msg_handler);\n",
       "        }\n",
       "      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n",
       "        var comm = window.PyViz.kernels[plot_id].connectToComm(comm_id);\n",
       "        comm.open();\n",
       "        if (msg_handler) {\n",
       "          comm.onMsg = msg_handler;\n",
       "        }\n",
       "      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n",
       "        var comm_promise = google.colab.kernel.comms.open(comm_id)\n",
       "        comm_promise.then((comm) => {\n",
       "          window.PyViz.comms[comm_id] = comm;\n",
       "          if (msg_handler) {\n",
       "            var messages = comm.messages[Symbol.asyncIterator]();\n",
       "            function processIteratorResult(result) {\n",
       "              var message = result.value;\n",
       "              var content = {data: message.data};\n",
       "              var metadata = message.metadata || {comm_id};\n",
       "              var msg = {content, metadata}\n",
       "              msg_handler(msg);\n",
       "              return messages.next().then(processIteratorResult);\n",
       "            }\n",
       "            return messages.next().then(processIteratorResult);\n",
       "          }\n",
       "        }) \n",
       "        var sendClosure = (data, metadata, buffers, disposeOnDone) => {\n",
       "          return comm_promise.then((comm) => {\n",
       "            comm.send(data, metadata, buffers, disposeOnDone);\n",
       "          });\n",
       "        };\n",
       "        var comm = {\n",
       "          send: sendClosure\n",
       "        };\n",
       "      }\n",
       "      window.PyViz.comms[comm_id] = comm;\n",
       "      return comm;\n",
       "    }\n",
       "    window.PyViz.comm_manager = new JupyterCommManager();\n",
       "    \n",
       "\n",
       "\n",
       "var JS_MIME_TYPE = 'application/javascript';\n",
       "var HTML_MIME_TYPE = 'text/html';\n",
       "var EXEC_MIME_TYPE = 'application/vnd.holoviews_exec.v0+json';\n",
       "var CLASS_NAME = 'output';\n",
       "\n",
       "/**\n",
       " * Render data to the DOM node\n",
       " */\n",
       "function render(props, node) {\n",
       "  var div = document.createElement(\"div\");\n",
       "  var script = document.createElement(\"script\");\n",
       "  node.appendChild(div);\n",
       "  node.appendChild(script);\n",
       "}\n",
       "\n",
       "/**\n",
       " * Handle when a new output is added\n",
       " */\n",
       "function handle_add_output(event, handle) {\n",
       "  var output_area = handle.output_area;\n",
       "  var output = handle.output;\n",
       "  if ((output.data == undefined) || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
       "    return\n",
       "  }\n",
       "  var id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "  var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "  if (id !== undefined) {\n",
       "    var nchildren = toinsert.length;\n",
       "    var html_node = toinsert[nchildren-1].children[0];\n",
       "    html_node.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "    var scripts = [];\n",
       "    var nodelist = html_node.querySelectorAll(\"script\");\n",
       "    for (var i in nodelist) {\n",
       "      if (nodelist.hasOwnProperty(i)) {\n",
       "        scripts.push(nodelist[i])\n",
       "      }\n",
       "    }\n",
       "\n",
       "    scripts.forEach( function (oldScript) {\n",
       "      var newScript = document.createElement(\"script\");\n",
       "      var attrs = [];\n",
       "      var nodemap = oldScript.attributes;\n",
       "      for (var j in nodemap) {\n",
       "        if (nodemap.hasOwnProperty(j)) {\n",
       "          attrs.push(nodemap[j])\n",
       "        }\n",
       "      }\n",
       "      attrs.forEach(function(attr) { newScript.setAttribute(attr.name, attr.value) });\n",
       "      newScript.appendChild(document.createTextNode(oldScript.innerHTML));\n",
       "      oldScript.parentNode.replaceChild(newScript, oldScript);\n",
       "    });\n",
       "    if (JS_MIME_TYPE in output.data) {\n",
       "      toinsert[nchildren-1].children[1].textContent = output.data[JS_MIME_TYPE];\n",
       "    }\n",
       "    output_area._hv_plot_id = id;\n",
       "    if ((window.Bokeh !== undefined) && (id in Bokeh.index)) {\n",
       "      window.PyViz.plot_index[id] = Bokeh.index[id];\n",
       "    } else {\n",
       "      window.PyViz.plot_index[id] = null;\n",
       "    }\n",
       "  } else if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "    var bk_div = document.createElement(\"div\");\n",
       "    bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "    var script_attrs = bk_div.children[0].attributes;\n",
       "    for (var i = 0; i < script_attrs.length; i++) {\n",
       "      toinsert[toinsert.length - 1].childNodes[1].setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "    }\n",
       "    // store reference to server id on output_area\n",
       "    output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "  }\n",
       "}\n",
       "\n",
       "/**\n",
       " * Handle when an output is cleared or removed\n",
       " */\n",
       "function handle_clear_output(event, handle) {\n",
       "  var id = handle.cell.output_area._hv_plot_id;\n",
       "  var server_id = handle.cell.output_area._bokeh_server_id;\n",
       "  if (((id === undefined) || !(id in PyViz.plot_index)) && (server_id !== undefined)) { return; }\n",
       "  var comm = window.PyViz.comm_manager.get_client_comm(\"hv-extension-comm\", \"hv-extension-comm\", function () {});\n",
       "  if (server_id !== null) {\n",
       "    comm.send({event_type: 'server_delete', 'id': server_id});\n",
       "    return;\n",
       "  } else if (comm !== null) {\n",
       "    comm.send({event_type: 'delete', 'id': id});\n",
       "  }\n",
       "  delete PyViz.plot_index[id];\n",
       "  if ((window.Bokeh !== undefined) & (id in window.Bokeh.index)) {\n",
       "    var doc = window.Bokeh.index[id].model.document\n",
       "    doc.clear();\n",
       "    const i = window.Bokeh.documents.indexOf(doc);\n",
       "    if (i > -1) {\n",
       "      window.Bokeh.documents.splice(i, 1);\n",
       "    }\n",
       "  }\n",
       "}\n",
       "\n",
       "/**\n",
       " * Handle kernel restart event\n",
       " */\n",
       "function handle_kernel_cleanup(event, handle) {\n",
       "  delete PyViz.comms[\"hv-extension-comm\"];\n",
       "  window.PyViz.plot_index = {}\n",
       "}\n",
       "\n",
       "/**\n",
       " * Handle update_display_data messages\n",
       " */\n",
       "function handle_update_output(event, handle) {\n",
       "  handle_clear_output(event, {cell: {output_area: handle.output_area}})\n",
       "  handle_add_output(event, handle)\n",
       "}\n",
       "\n",
       "function register_renderer(events, OutputArea) {\n",
       "  function append_mime(data, metadata, element) {\n",
       "    // create a DOM node to render to\n",
       "    var toinsert = this.create_output_subarea(\n",
       "    metadata,\n",
       "    CLASS_NAME,\n",
       "    EXEC_MIME_TYPE\n",
       "    );\n",
       "    this.keyboard_manager.register_events(toinsert);\n",
       "    // Render to node\n",
       "    var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "    render(props, toinsert[0]);\n",
       "    element.append(toinsert);\n",
       "    return toinsert\n",
       "  }\n",
       "\n",
       "  events.on('output_added.OutputArea', handle_add_output);\n",
       "  events.on('output_updated.OutputArea', handle_update_output);\n",
       "  events.on('clear_output.CodeCell', handle_clear_output);\n",
       "  events.on('delete.Cell', handle_clear_output);\n",
       "  events.on('kernel_ready.Kernel', handle_kernel_cleanup);\n",
       "\n",
       "  OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "    safe: true,\n",
       "    index: 0\n",
       "  });\n",
       "}\n",
       "\n",
       "if (window.Jupyter !== undefined) {\n",
       "  try {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  } catch(err) {\n",
       "  }\n",
       "}\n"
      ],
      "application/vnd.holoviews_load.v0+json": "\nif ((window.PyViz === undefined) || (window.PyViz instanceof HTMLElement)) {\n  window.PyViz = {comms: {}, comm_status:{}, kernels:{}, receivers: {}, plot_index: []}\n}\n\n\n    function JupyterCommManager() {\n    }\n\n    JupyterCommManager.prototype.register_target = function(plot_id, comm_id, msg_handler) {\n      if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n        comm_manager.register_target(comm_id, function(comm) {\n          comm.on_msg(msg_handler);\n        });\n      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n        window.PyViz.kernels[plot_id].registerCommTarget(comm_id, function(comm) {\n          comm.onMsg = msg_handler;\n        });\n      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n        google.colab.kernel.comms.registerTarget(comm_id, (comm) => {\n          var messages = comm.messages[Symbol.asyncIterator]();\n          function processIteratorResult(result) {\n            var message = result.value;\n            console.log(message)\n            var content = {data: message.data, comm_id};\n            var buffers = []\n            for (var buffer of message.buffers || []) {\n              buffers.push(new DataView(buffer))\n            }\n            var metadata = message.metadata || {};\n            var msg = {content, buffers, metadata}\n            msg_handler(msg);\n            return messages.next().then(processIteratorResult);\n          }\n          return messages.next().then(processIteratorResult);\n        })\n      }\n    }\n\n    JupyterCommManager.prototype.get_client_comm = function(plot_id, comm_id, msg_handler) {\n      if (comm_id in window.PyViz.comms) {\n        return window.PyViz.comms[comm_id];\n      } else if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {\n        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;\n        var comm = comm_manager.new_comm(comm_id, {}, {}, {}, comm_id);\n        if (msg_handler) {\n          comm.on_msg(msg_handler);\n        }\n      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {\n        var comm = window.PyViz.kernels[plot_id].connectToComm(comm_id);\n        comm.open();\n        if (msg_handler) {\n          comm.onMsg = msg_handler;\n        }\n      } else if (typeof google != 'undefined' && google.colab.kernel != null) {\n        var comm_promise = google.colab.kernel.comms.open(comm_id)\n        comm_promise.then((comm) => {\n          window.PyViz.comms[comm_id] = comm;\n          if (msg_handler) {\n            var messages = comm.messages[Symbol.asyncIterator]();\n            function processIteratorResult(result) {\n              var message = result.value;\n              var content = {data: message.data};\n              var metadata = message.metadata || {comm_id};\n              var msg = {content, metadata}\n              msg_handler(msg);\n              return messages.next().then(processIteratorResult);\n            }\n            return messages.next().then(processIteratorResult);\n          }\n        }) \n        var sendClosure = (data, metadata, buffers, disposeOnDone) => {\n          return comm_promise.then((comm) => {\n            comm.send(data, metadata, buffers, disposeOnDone);\n          });\n        };\n        var comm = {\n          send: sendClosure\n        };\n      }\n      window.PyViz.comms[comm_id] = comm;\n      return comm;\n    }\n    window.PyViz.comm_manager = new JupyterCommManager();\n    \n\n\nvar JS_MIME_TYPE = 'application/javascript';\nvar HTML_MIME_TYPE = 'text/html';\nvar EXEC_MIME_TYPE = 'application/vnd.holoviews_exec.v0+json';\nvar CLASS_NAME = 'output';\n\n/**\n * Render data to the DOM node\n */\nfunction render(props, node) {\n  var div = document.createElement(\"div\");\n  var script = document.createElement(\"script\");\n  node.appendChild(div);\n  node.appendChild(script);\n}\n\n/**\n * Handle when a new output is added\n */\nfunction handle_add_output(event, handle) {\n  var output_area = handle.output_area;\n  var output = handle.output;\n  if ((output.data == undefined) || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n    return\n  }\n  var id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n  var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n  if (id !== undefined) {\n    var nchildren = toinsert.length;\n    var html_node = toinsert[nchildren-1].children[0];\n    html_node.innerHTML = output.data[HTML_MIME_TYPE];\n    var scripts = [];\n    var nodelist = html_node.querySelectorAll(\"script\");\n    for (var i in nodelist) {\n      if (nodelist.hasOwnProperty(i)) {\n        scripts.push(nodelist[i])\n      }\n    }\n\n    scripts.forEach( function (oldScript) {\n      var newScript = document.createElement(\"script\");\n      var attrs = [];\n      var nodemap = oldScript.attributes;\n      for (var j in nodemap) {\n        if (nodemap.hasOwnProperty(j)) {\n          attrs.push(nodemap[j])\n        }\n      }\n      attrs.forEach(function(attr) { newScript.setAttribute(attr.name, attr.value) });\n      newScript.appendChild(document.createTextNode(oldScript.innerHTML));\n      oldScript.parentNode.replaceChild(newScript, oldScript);\n    });\n    if (JS_MIME_TYPE in output.data) {\n      toinsert[nchildren-1].children[1].textContent = output.data[JS_MIME_TYPE];\n    }\n    output_area._hv_plot_id = id;\n    if ((window.Bokeh !== undefined) && (id in Bokeh.index)) {\n      window.PyViz.plot_index[id] = Bokeh.index[id];\n    } else {\n      window.PyViz.plot_index[id] = null;\n    }\n  } else if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n    var bk_div = document.createElement(\"div\");\n    bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n    var script_attrs = bk_div.children[0].attributes;\n    for (var i = 0; i < script_attrs.length; i++) {\n      toinsert[toinsert.length - 1].childNodes[1].setAttribute(script_attrs[i].name, script_attrs[i].value);\n    }\n    // store reference to server id on output_area\n    output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n  }\n}\n\n/**\n * Handle when an output is cleared or removed\n */\nfunction handle_clear_output(event, handle) {\n  var id = handle.cell.output_area._hv_plot_id;\n  var server_id = handle.cell.output_area._bokeh_server_id;\n  if (((id === undefined) || !(id in PyViz.plot_index)) && (server_id !== undefined)) { return; }\n  var comm = window.PyViz.comm_manager.get_client_comm(\"hv-extension-comm\", \"hv-extension-comm\", function () {});\n  if (server_id !== null) {\n    comm.send({event_type: 'server_delete', 'id': server_id});\n    return;\n  } else if (comm !== null) {\n    comm.send({event_type: 'delete', 'id': id});\n  }\n  delete PyViz.plot_index[id];\n  if ((window.Bokeh !== undefined) & (id in window.Bokeh.index)) {\n    var doc = window.Bokeh.index[id].model.document\n    doc.clear();\n    const i = window.Bokeh.documents.indexOf(doc);\n    if (i > -1) {\n      window.Bokeh.documents.splice(i, 1);\n    }\n  }\n}\n\n/**\n * Handle kernel restart event\n */\nfunction handle_kernel_cleanup(event, handle) {\n  delete PyViz.comms[\"hv-extension-comm\"];\n  window.PyViz.plot_index = {}\n}\n\n/**\n * Handle update_display_data messages\n */\nfunction handle_update_output(event, handle) {\n  handle_clear_output(event, {cell: {output_area: handle.output_area}})\n  handle_add_output(event, handle)\n}\n\nfunction register_renderer(events, OutputArea) {\n  function append_mime(data, metadata, element) {\n    // create a DOM node to render to\n    var toinsert = this.create_output_subarea(\n    metadata,\n    CLASS_NAME,\n    EXEC_MIME_TYPE\n    );\n    this.keyboard_manager.register_events(toinsert);\n    // Render to node\n    var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n    render(props, toinsert[0]);\n    element.append(toinsert);\n    return toinsert\n  }\n\n  events.on('output_added.OutputArea', handle_add_output);\n  events.on('output_updated.OutputArea', handle_update_output);\n  events.on('clear_output.CodeCell', handle_clear_output);\n  events.on('delete.Cell', handle_clear_output);\n  events.on('kernel_ready.Kernel', handle_kernel_cleanup);\n\n  OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n    safe: true,\n    index: 0\n  });\n}\n\nif (window.Jupyter !== undefined) {\n  try {\n    var events = require('base/js/events');\n    var OutputArea = require('notebook/js/outputarea').OutputArea;\n    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n      register_renderer(events, OutputArea);\n    }\n  } catch(err) {\n  }\n}\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import chromatose"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Chromatose is a long word. Let's use an alias instead with the keyword `as`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import chromatose as ct"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I generally only use aliases when I absolutely am not in a typing mood, or for very large libraries like Numpy or Pandas where I wouldn't even recognize `np` or `pd` as anything else, or when I don't anticipate using the reference for other variable names. `ct` is often used as count, so it might be a bit fragile as an alias, but it is used here mainly for demonstrative purposes. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see what's inside, we can use the `help()` method or place `??` after. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[0;31mType:\u001b[0m        module\n",
       "\u001b[0;31mString form:\u001b[0m <module 'chromatose' from '/Users/bois/opt/anaconda3/lib/python3.8/site-packages/chromatose/__init__.py'>\n",
       "\u001b[0;31mFile:\u001b[0m        ~/opt/anaconda3/lib/python3.8/site-packages/chromatose/__init__.py\n",
       "\u001b[0;31mSource:\u001b[0m     \n",
       "\u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mpalettes\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mviz\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0m__author__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Rosita Fu\"\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0m__version__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"0.0.2\"\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0m__license__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"MIT\"\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0m__email__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"rfu@caltech.edu\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ct??"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To **use** the functions and retrieve the variables inside the modules we use dot syntax. If a function/variable is within the **namespace** of a package, you can directly access those functions with *either* `pkg.function()` or `pkg.module.function()`. This is nice, because we are very explicit about where we are getting our functions.\n",
    "\n",
    "- For example, in numpy, you have to call `np.random.choice()`, and cannot simply call `np.choice()`. The choice function is thus *not* in the namespace of numpy. When making a package, there are ways to control the user-end of calls with different import statements in your `__init__` file, but we'll talk about this later.\n",
    "- As a side note, sometimes people import modules with \n",
    "```python\n",
    "from module_name import *\n",
    "``` \n",
    "\n",
    "Although you can do the same with packages, I find it hectic and discourage it. Essentially the statement's unpacking and plopping all that code directly into your file, instead of bundling it inside `module_name`. *All* the variable names defined within `module_name` are vulnerable to user manipulation, and potentially overwrite built-in functions. Obviously if you import packages this way, you can just access the variables and functions without dot syntax, but again, this is a chaotic way to live.\n",
    "    - As an example, if there was a function called slice() in module_name.py, and you imported the module like above, you would no longer be using Python's slice() function. \n",
    "    \n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "In general, DON'T import modules into the global namespace unless you are absolutely positively sure you/users will not get a name clash.\n",
    "\n",
    "</div>\n",
    "\n",
    "Inside `palettes.py` are a bunch of variables that are small lists of hex values, the names of which can be found in the README, or again, using `help()` or `??`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['#29937b', '#044032', '#902a42', '#3f0914', '#e4607c']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ct.pepo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['#29937b', '#044032', '#902a42', '#3f0914', '#e4607c']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ct.palettes.pepo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, they both reference the same object, but note that `pepo` is not a file in our package, it is actually a variable inside the `palettes.py` module. Dot syntax is very powerful, and python uses it to retrieve variables, functions, and modules alike.\n",
    "\n",
    "The `__xxx__` variables are typically informative strings that you can call as well. The most useful one I have found when navigating other packages is the `__version__` string. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.1.3'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "pd.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.0.2'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ct.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly, the functions inside `viz.py` like palplot can be accessed either with `ct.viz.palplot()` or `ct.palplot()`. You can view the docstring with `?`. Docstrings inform the user of input types and expected returns, additional kywargs, and the overall purpose for its existence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[0;31mSignature:\u001b[0m\n",
       "\u001b[0mct\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mviz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpalplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mpalette\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mplot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'all'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mbg_color\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'white'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1.0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mscatter_kwargs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
       "\u001b[0;31mDocstring:\u001b[0m\n",
       "Displays palette via bokeh. Hover for hex/rgb value.\n",
       "Arguments\n",
       "---------\n",
       "palette : list of hex strings or rgb tuples or HTML names (any combination)\n",
       "plot : \n",
       "    'swatch' for squares, \n",
       "    'pie' for wedges (adjacency comparison),\n",
       "    'points' for some points,\n",
       "    'line' for some lines,\n",
       "    'scatter' for a scatterplot,\n",
       "    'all' for all (with dropdown menu for lines/points/scatter)\n",
       "bg_color : background fill color, \n",
       "    valid name hex or rgb \n",
       "alpha : alpha of entire palette, \n",
       "    fraction btw 0.0 and 1.0\n",
       "shuffle : shuffles palette, boolean,\n",
       "scatter_kwargs : dicitonary, 'click_policy' is boolean,\n",
       "    if True, legend is on plot and can click/hide\n",
       "    if False, legend is off plot, no overlap\n",
       "\u001b[0;31mFile:\u001b[0m      ~/opt/anaconda3/lib/python3.8/site-packages/chromatose/viz.py\n",
       "\u001b[0;31mType:\u001b[0m      function\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ct.viz.palplot?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the docstring states, the input palette expects a list of colors either in the form of hex values, rgb tuples, or HTML names, and returns a widget for the user."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {},
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.holoviews_exec.v0+json": "",
      "text/html": [
       "<div id='1352'>\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"f8b6366c-8802-4301-8afa-531a8670d572\" data-root-id=\"1352\"></div>\n",
       "</div>\n",
       "<script type=\"application/javascript\">(function(root) {\n",
       "  function embed_document(root) {\n",
       "    var docs_json = {\"1fa9fa17-5aae-4216-aa38-8a66ff4a1e6c\":{\"roots\":{\"references\":[{\"attributes\":{},\"id\":\"1007\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1128\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"1127\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"reload\":false},\"id\":\"1718\",\"type\":\"panel.models.location.Location\"},{\"attributes\":{},\"id\":\"1287\",\"type\":\"Selection\"},{\"attributes\":{\"text\":\"\"},\"id\":\"1373\",\"type\":\"Title\"},{\"attributes\":{\"data_source\":{\"id\":\"1288\"},\"glyph\":{\"id\":\"1289\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1290\"},\"selection_glyph\":null,\"view\":{\"id\":\"1292\"}},\"id\":\"1291\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"end\":5,\"start\":-1},\"id\":\"1045\",\"type\":\"Range1d\"},{\"attributes\":{\"line_color\":\"#3f0914\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1261\",\"type\":\"Line\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"AAAAAAAAAAD7EnmctWqQP/sSeZy1aqA/eJy1ahCgqD/7EnmctWqwP7pXlwNjhbQ/eJy1ahCguD834dPRvbq8P/sSeZy1asA/WjUIUAx4wj+6V5cDY4XEPxl6Jre5ksY/eJy1ahCgyD/YvkQeZ63KPzfh09G9usw/lwNjhRTIzj/7EnmctWrQPyukQPZgcdE/WjUIUAx40j+Kxs+pt37TP7pXlwNjhdQ/6eheXQ6M1T8Zeia3uZLWP0kL7hBlmdc/eJy1ahCg2D+oLX3Eu6bZP9i+RB5nrdo/CFAMeBK02z834dPRvbrcP2dymytpwd0/lwNjhRTI3j/GlCrfv87fP/sSeZy1auA/k9tcSQvu4D8rpED2YHHhP8NsJKO29OE/WjUIUAx44j/y/ev8YfviP4rGz6m3fuM/Io+zVg0C5D+6V5cDY4XkP1Ige7C4COU/6eheXQ6M5T+BsUIKZA/mPxl6Jre5kuY/sUIKZA8W5z9JC+4QZZnnP+HT0b26HOg/eJy1ahCg6D8QZZkXZiPpP6gtfcS7puk/QPZgcREq6j/YvkQeZ63qP3CHKMu8MOs/CFAMeBK06z+fGPAkaDfsPzfh09G9uuw/z6m3fhM+7T9ncpsracHtP/86f9i+RO4/lwNjhRTI7j8uzEYyakvvP8aUKt+/zu8/ry4Hxgop8D/7EnmctWrwP0f36nJgrPA/k9tcSQvu8D/fv84fti/xPyukQPZgcfE/d4iyzAuz8T/DbCSjtvTxPw5RlnlhNvI/WjUIUAx48j+mGXomt7nyP/L96/xh+/I/PuJd0ww98z+Kxs+pt37zP9aqQYBiwPM/Io+zVg0C9D9ucyUtuEP0P7pXlwNjhfQ/BjwJ2g3H9D9SIHuwuAj1P54E7YZjSvU/6eheXQ6M9T81zdAzuc31P4GxQgpkD/Y/zZW04A5R9j8Zeia3uZL2P2VemI1k1PY/sUIKZA8W9z/9Jnw6ulf3P0kL7hBlmfc/le9f5w/b9z/h09G9uhz4Py24Q5RlXvg/eJy1ahCg+D/EgCdBu+H4PxBlmRdmI/k/XEkL7hBl+T+oLX3Eu6b5P/QR75pm6Pk/QPZgcREq+j+M2tJHvGv6P9i+RB5nrfo/JKO29BHv+j9whyjLvDD7P7xrmqFncvs/CFAMeBK0+z9TNH5OvfX7P58Y8CRoN/w/6/xh+xJ5/D834dPRvbr8P4PFRaho/Pw/z6m3fhM+/T8bjilVvn/9P2dymytpwf0/s1YNAhQD/j//On/YvkT+P0sf8a5phv4/lwNjhRTI/j/j59Rbvwn/Py7MRjJqS/8/erC4CBWN/z/GlCrfv87/P4k8zlo1CABAry4HxgopAEDVIEAx4EkAQPsSeZy1agBAIQWyB4uLAEBH9+pyYKwAQG3pI941zQBAk9tcSQvuAEC5zZW04A4BQN+/zh+2LwFABbIHi4tQAUArpED2YHEBQFGWeWE2kgFAd4iyzAuzAUCdeus34dMBQMNsJKO29AFA6F5dDowVAkAOUZZ5YTYCQDRDz+Q2VwJAWjUIUAx4AkCAJ0G74ZgCQKYZeia3uQJAzAuzkYzaAkDy/ev8YfsCQBjwJGg3HANAPuJd0ww9A0Bk1JY+4l0DQIrGz6m3fgNAsLgIFY2fA0DWqkGAYsADQPyceus34QNAIo+zVg0CBEBIgezB4iIEQG5zJS24QwRAlGVemI1kBEC6V5cDY4UEQOBJ0G44pgRABjwJ2g3HBEAsLkJF4+cEQFIge7C4CAVAeBK0G44pBUCeBO2GY0oFQMP2JfI4awVA6eheXQ6MBUAP25fI46wFQDXN0DO5zQVAW78Jn47uBUCBsUIKZA8GQKeje3U5MAZAzZW04A5RBkDzh+1L5HEGQBl6Jre5kgZAP2xfIo+zBkBlXpiNZNQGQItQ0fg59QZAsUIKZA8WB0DXNEPP5DYHQP0mfDq6VwdAIxm1pY94B0BJC+4QZZkHQG/9Jnw6ugdAle9f5w/bB0C74ZhS5fsHQOHT0b26HAhAB8YKKZA9CEAtuEOUZV4IQFOqfP86fwhAeJy1ahCgCECeju7V5cAIQMSAJ0G74QhA6nJgrJACCUAQZZkXZiMJQDZX0oI7RAlAXEkL7hBlCUCCO0RZ5oUJQKgtfcS7pglAzh+2L5HHCUD0Ee+aZugJQBoEKAY8CQpAQPZgcREqCkBm6Jnc5koKQIza0ke8awpAsswLs5GMCkDYvkQeZ60KQP6wfYk8zgpAJKO29BHvCkBKle9f5w8LQHCHKMu8MAtAlnlhNpJRC0C8a5qhZ3ILQOJd0ww9kwtACFAMeBK0C0AuQkXj59QLQFM0fk699QtAeSa3uZIWDECfGPAkaDcMQMUKKZA9WAxA6/xh+xJ5DEAR75pm6JkMQDfh09G9ugxAXdMMPZPbDECDxUWoaPwMQKm3fhM+HQ1Az6m3fhM+DUD1m/Dp6F4NQBuOKVW+fw1AQYBiwJOgDUBncpsracENQI1k1JY+4g1As1YNAhQDDkDZSEZt6SMOQP86f9i+RA5AJS24Q5RlDkBLH/GuaYYOQHERKho/pw5AlwNjhRTIDkC99Zvw6egOQOPn1Fu/CQ9ACdoNx5QqD0AuzEYyaksPQFS+f50/bA9AerC4CBWND0CgovFz6q0PQMaUKt+/zg9A7IZjSpXvD0CJPM5aNQgQQJy1ahCgGBBAry4HxgopEEDCp6N7dTkQQNUgQDHgSRBA6Jnc5kpaEED7EnmctWoQQA6MFVIgexBAIQWyB4uLEEA0fk699ZsQQEf36nJgrBBAWnCHKMu8EEBt6SPeNc0QQIBiwJOg3RBAk9tcSQvuEECmVPn+df4QQLnNlbTgDhFAzEYyaksfEUDfv84fti8RQPI4a9UgQBFABbIHi4tQEUAYK6RA9mARQCukQPZgcRFAPh3dq8uBEUBRlnlhNpIRQGQPFhehohFAd4iyzAuzEUCKAU+CdsMRQJ166zfh0xFAsPOH7UvkEUDDbCSjtvQRQNblwFghBRJA6F5dDowVEkD71/nD9iUSQA5RlnlhNhJAIcoyL8xGEkA0Q8/kNlcSQEe8a5qhZxJAWjUIUAx4EkBtrqQFd4gSQIAnQbvhmBJAk6DdcEypEkCmGXomt7kSQLmSFtwhyhJAzAuzkYzaEkDfhE9H9+oSQPL96/xh+xJABXeIsswLE0AY8CRoNxwTQCtpwR2iLBNAPuJd0ww9E0BRW/qId00TQGTUlj7iXRNAd00z9ExuE0CKxs+pt34TQJ0/bF8ijxNAsLgIFY2fE0DDMaXK968TQNaqQYBiwBNA6SPeNc3QE0D8nHrrN+ETQA8WF6Gi8RNAIo+zVg0CFEA1CFAMeBIUQEiB7MHiIhRAW/qId00zFEBucyUtuEMUQIHsweIiVBRAlGVemI1kFECn3vpN+HQUQLpXlwNjhRRAzdAzuc2VFEDgSdBuOKYUQPPCbCSjthRABjwJ2g3HFEAZtaWPeNcUQCwuQkXj5xRAP6fe+k34FEBSIHuwuAgVQGWZF2YjGRVAeBK0G44pFUCLi1DR+DkVQJ4E7YZjShVAsH2JPM5aFUDD9iXyOGsVQNZvwqejexVA6eheXQ6MFUD8YfsSeZwVQA/bl8jjrBVAIlQ0fk69FUA1zdAzuc0VQEhGbekj3hVAW78Jn47uFUBuOKZU+f4VQIGxQgpkDxZAlCrfv84fFkCno3t1OTAWQLocGCukQBZAzZW04A5RFkDgDlGWeWEWQPOH7UvkcRZABgGKAU+CFkAZeia3uZIWQCzzwmwkoxZAP2xfIo+zFkBS5fvX+cMWQGVemI1k1BZAeNc0Q8/kFkCLUNH4OfUWQJ7Jba6kBRdAsUIKZA8WF0DEu6YZeiYXQNc0Q8/kNhdA6q3fhE9HF0D9Jnw6ulcXQBCgGPAkaBdAIxm1pY94F0A2klFb+ogXQEkL7hBlmRdAXISKxs+pF0Bv/SZ8OroXQIJ2wzGlyhdAle9f5w/bF0CoaPyceusXQLvhmFLl+xdAzlo1CFAMGEDh09G9uhwYQPRMbnMlLRhAB8YKKZA9GEAaP6fe+k0YQC24Q5RlXhhAQDHgSdBuGEBTqnz/On8YQGYjGbWljxhAeJy1ahCgGECLFVIge7AYQJ6O7tXlwBhAsQeLi1DRGEDEgCdBu+EYQNf5w/Yl8hhA6nJgrJACGUD96/xh+xIZQBBlmRdmIxlAI941zdAzGUA2V9KCO0QZQEnQbjimVBlAXEkL7hBlGUBvwqeje3UZQII7RFnmhRlAlbTgDlGWGUCoLX3Eu6YZQLumGXomtxlAzh+2L5HHGUDhmFLl+9cZQPQR75pm6BlAB4uLUNH4GUAaBCgGPAkaQC19xLumGRpAQPZgcREqGkBTb/0mfDoaQGbomdzmShpAeWE2klFbGkCM2tJHvGsaQJ9Tb/0mfBpAsswLs5GMGkDFRaho/JwaQNi+RB5nrRpA6zfh09G9GkD+sH2JPM4aQBEqGj+n3hpAJKO29BHvGkA3HFOqfP8aQEqV71/nDxtAXQ6MFVIgG0BwhyjLvDAbQIMAxYAnQRtAlnlhNpJRG0Cp8v3r/GEbQLxrmqFnchtAz+Q2V9KCG0DiXdMMPZMbQPXWb8KnoxtACFAMeBK0G0AbyagtfcQbQC5CRePn1BtAQbvhmFLlG0BTNH5OvfUbQGatGgQoBhxAeSa3uZIWHECMn1Nv/SYcQJ8Y8CRoNxxAspGM2tJHHEDFCimQPVgcQNiDxUWoaBxA6/xh+xJ5HED+df6wfYkcQBHvmmbomRxAJGg3HFOqHEA34dPRvbocQEpacIcoyxxAXdMMPZPbHEBwTKny/escQIPFRaho/BxAlj7iXdMMHUCpt34TPh0dQLwwG8moLR1Az6m3fhM+HUDiIlQ0fk4dQPWb8OnoXh1ACBWNn1NvHUAbjilVvn8dQC4HxgopkB1AQYBiwJOgHUBU+f51/rAdQGdymytpwR1Aeus34dPRHUCNZNSWPuIdQKDdcEyp8h1As1YNAhQDHkDGz6m3fhMeQNlIRm3pIx5A7MHiIlQ0HkD/On/YvkQeQBK0G44pVR5AJS24Q5RlHkA4plT5/nUeQEsf8a5phh5AXpiNZNSWHkBxESoaP6ceQISKxs+ptx5AlwNjhRTIHkCqfP86f9geQL31m/Dp6B5A0G44plT5HkDj59RbvwkfQPZgcREqGh9ACdoNx5QqH0AbU6p8/zofQC7MRjJqSx9AQUXj59RbH0BUvn+dP2wfQGc3HFOqfB9AerC4CBWNH0CNKVW+f50fQKCi8XPqrR9AsxuOKVW+H0DGlCrfv84fQNkNx5Qq3x9A7IZjSpXvH0AAAAAAAAAgQA==\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]},\"y\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]}},\"selected\":{\"id\":\"1287\"},\"selection_policy\":{\"id\":\"1286\"}},\"id\":\"1260\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"data_source\":{\"id\":\"1186\"},\"glyph\":{\"id\":\"1187\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1188\"},\"selection_glyph\":null,\"view\":{\"id\":\"1190\"}},\"id\":\"1189\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"source\":{\"id\":\"1260\"}},\"id\":\"1264\",\"type\":\"CDSView\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#902a42\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#902a42\"},\"size\":{\"units\":\"screen\",\"value\":3},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1188\",\"type\":\"Circle\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#3f0914\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1262\",\"type\":\"Line\"},{\"attributes\":{\"data_source\":{\"id\":\"1131\"},\"glyph\":{\"id\":\"1132\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1133\"},\"selection_glyph\":null,\"view\":{\"id\":\"1135\"}},\"id\":\"1134\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#e4607c\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#e4607c\"},\"size\":{\"units\":\"screen\",\"value\":3},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1290\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1145\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"line_color\":\"#29937b\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1132\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1375\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"line_color\":\"#902a42\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1210\",\"type\":\"Line\"},{\"attributes\":{\"data_source\":{\"id\":\"1147\"},\"glyph\":{\"id\":\"1148\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1149\"},\"selection_glyph\":null,\"view\":{\"id\":\"1151\"}},\"id\":\"1150\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"source\":{\"id\":\"1186\"}},\"id\":\"1190\",\"type\":\"CDSView\"},{\"attributes\":{\"source\":{\"id\":\"1131\"}},\"id\":\"1135\",\"type\":\"CDSView\"},{\"attributes\":{\"label\":{\"value\":\"#902a42\"},\"renderers\":[{\"id\":\"1189\"},{\"id\":\"1212\"}]},\"id\":\"1208\",\"type\":\"LegendItem\"},{\"attributes\":{},\"id\":\"1286\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]},\"y\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]}},\"selected\":{\"id\":\"1146\"},\"selection_policy\":{\"id\":\"1145\"}},\"id\":\"1131\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"source\":{\"id\":\"1209\"}},\"id\":\"1213\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1020\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"1377\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1207\",\"type\":\"Selection\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#29937b\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1133\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1206\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#044032\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#044032\"},\"size\":{\"units\":\"screen\",\"value\":3},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1149\",\"type\":\"Circle\"},{\"attributes\":{\"overlay\":{\"id\":\"1025\"}},\"id\":\"1021\",\"type\":\"BoxZoomTool\"},{\"attributes\":{\"data\":{\"angle\":{\"__ndarray__\":\"AGIFq3rN9T9QUFbFZhDvP3RDZzc6nOk/AkKnWFd+5T8dUdxhNuXkP9G93sz6d9Y/6z118FLC0j8zsoLWAI3MP7zX6S8E9ck/proiW58gyD/p+OJsbYW+PyTF2xNAErU/Als8xbeWtD+JOxGb1cGtP5u4CSedwqY/TOKxVYptpD/hVPEosXygP8gkwqknnJg/QHxEbwaulj8wK0n6w9GSP8Nxi7ZlvIk/8QlBUHW6gD/DcYu2Zbx5P8Q5NBtpf5I/\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[24]},\"hex\":[\"#29937b\",\"#044032\",\"#902a42\",\"#3f0914\",\"#e4607c\",\"#29937b\",\"#044032\",\"#902a42\",\"#3f0914\",\"#e4607c\",\"#29937b\",\"#044032\",\"#902a42\",\"#3f0914\",\"#e4607c\",\"#29937b\",\"#044032\",\"#902a42\",\"#3f0914\",\"#e4607c\",\"#29937b\",\"#044032\",\"#902a42\",\"#3f0914\"],\"index\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],\"palette\":[\"#29937b\",\"#044032\",\"#902a42\",\"#3f0914\",\"#e4607c\",\"#29937b\",\"#044032\",\"#902a42\",\"#3f0914\",\"#e4607c\",\"#29937b\",\"#044032\",\"#902a42\",\"#3f0914\",\"#e4607c\",\"#29937b\",\"#044032\",\"#902a42\",\"#3f0914\",\"#e4607c\",\"#29937b\",\"#044032\",\"#902a42\",\"#3f0914\"],\"rgb\":[[41,147,123],[4,64,50],[144,42,66],[63,9,20],[228,96,124],[41,147,123],[4,64,50],[144,42,66],[63,9,20],[228,96,124],[41,147,123],[4,64,50],[144,42,66],[63,9,20],[228,96,124],[41,147,123],[4,64,50],[144,42,66],[63,9,20],[228,96,124],[41,147,123],[4,64,50],[144,42,66],[63,9,20]]},\"selected\":{\"id\":\"1362\"},\"selection_policy\":{\"id\":\"1361\"}},\"id\":\"1037\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1146\",\"type\":\"Selection\"},{\"attributes\":{\"fill_color\":{\"value\":\"#e4607c\"},\"line_color\":{\"value\":\"#e4607c\"},\"size\":{\"units\":\"screen\",\"value\":3},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1289\",\"type\":\"Circle\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]},\"y\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]}},\"selected\":{\"id\":\"1317\"},\"selection_policy\":{\"id\":\"1316\"}},\"id\":\"1288\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"data_source\":{\"id\":\"1209\"},\"glyph\":{\"id\":\"1210\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1211\"},\"selection_glyph\":null,\"view\":{\"id\":\"1213\"}},\"id\":\"1212\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"line_color\":\"#e4607c\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1320\",\"type\":\"Line\"},{\"attributes\":{\"source\":{\"id\":\"1288\"}},\"id\":\"1292\",\"type\":\"CDSView\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#902a42\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1211\",\"type\":\"Line\"},{\"attributes\":{\"label\":{\"value\":\"#e4607c\"},\"renderers\":[{\"id\":\"1291\"},{\"id\":\"1322\"}]},\"id\":\"1318\",\"type\":\"LegendItem\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]},\"y\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]}},\"selected\":{\"id\":\"1232\"},\"selection_policy\":{\"id\":\"1231\"}},\"id\":\"1209\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1350\",\"type\":\"Selection\"},{\"attributes\":{\"data\":{\"hex\":[\"#29937b\",\"#044032\",\"#902a42\",\"#3f0914\",\"#e4607c\"],\"index\":[0,1,2,3,4],\"palette\":[\"#29937b\",\"#044032\",\"#902a42\",\"#3f0914\",\"#e4607c\"],\"rgb\":[[41,147,123],[4,64,50],[144,42,66],[63,9,20],[228,96,124]],\"x\":[0,1,2,3,4],\"y\":[0,0,0,0,0]},\"selected\":{\"id\":\"1380\"},\"selection_policy\":{\"id\":\"1379\"}},\"id\":\"1077\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"data_source\":{\"id\":\"1233\"},\"glyph\":{\"id\":\"1234\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1235\"},\"selection_glyph\":null,\"view\":{\"id\":\"1237\"}},\"id\":\"1236\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1317\",\"type\":\"Selection\"},{\"attributes\":{\"fill_color\":{\"value\":\"#044032\"},\"line_color\":{\"value\":\"#044032\"},\"size\":{\"units\":\"screen\",\"value\":3},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1148\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1316\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1232\",\"type\":\"Selection\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]},\"y\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]}},\"selected\":{\"id\":\"1164\"},\"selection_policy\":{\"id\":\"1163\"}},\"id\":\"1147\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1019\",\"type\":\"PanTool\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#3f0914\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#3f0914\"},\"size\":{\"units\":\"screen\",\"value\":3},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1235\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1163\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1379\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"line_color\":\"#044032\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1167\",\"type\":\"Line\"},{\"attributes\":{\"formatter\":{\"id\":\"1357\"},\"ticker\":{\"id\":\"1012\"},\"visible\":false},\"id\":\"1011\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1380\",\"type\":\"Selection\"},{\"attributes\":{\"source\":{\"id\":\"1147\"}},\"id\":\"1151\",\"type\":\"CDSView\"},{\"attributes\":{\"label\":{\"value\":\"#044032\"},\"renderers\":[{\"id\":\"1150\"},{\"id\":\"1169\"}]},\"id\":\"1165\",\"type\":\"LegendItem\"},{\"attributes\":{},\"id\":\"1231\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1184\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"data_source\":{\"id\":\"1319\"},\"glyph\":{\"id\":\"1320\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1321\"},\"selection_glyph\":null,\"view\":{\"id\":\"1323\"}},\"id\":\"1322\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1005\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1164\",\"type\":\"Selection\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]},\"y\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]}},\"selected\":{\"id\":\"1350\"},\"selection_policy\":{\"id\":\"1349\"}},\"id\":\"1319\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"formatter\":{\"id\":\"1359\"},\"ticker\":{\"id\":\"1016\"},\"visible\":false},\"id\":\"1015\",\"type\":\"LinearAxis\"},{\"attributes\":{\"source\":{\"id\":\"1319\"}},\"id\":\"1323\",\"type\":\"CDSView\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#e4607c\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1321\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1012\",\"type\":\"BasicTicker\"},{\"attributes\":{\"fill_color\":{\"value\":\"#3f0914\"},\"line_color\":{\"value\":\"#3f0914\"},\"size\":{\"units\":\"screen\",\"value\":3},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1234\",\"type\":\"Circle\"},{\"attributes\":{\"field\":\"angle\"},\"id\":\"1036\",\"type\":\"CumSum\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]},\"y\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]}},\"selected\":{\"id\":\"1258\"},\"selection_policy\":{\"id\":\"1257\"}},\"id\":\"1233\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"background_fill_color\":\"white\",\"below\":[{\"id\":\"1053\"}],\"center\":[{\"id\":\"1056\"},{\"id\":\"1060\"}],\"left\":[{\"id\":\"1057\"}],\"plot_height\":60,\"plot_width\":325,\"renderers\":[{\"id\":\"1081\"}],\"title\":{\"id\":\"1373\"},\"toolbar\":{\"id\":\"1069\"},\"x_range\":{\"id\":\"1045\"},\"x_scale\":{\"id\":\"1049\"},\"y_range\":{\"id\":\"1047\"},\"y_scale\":{\"id\":\"1051\"}},\"id\":\"1044\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"background_fill_color\":\"white\",\"below\":[{\"id\":\"1011\"}],\"center\":[{\"id\":\"1014\"},{\"id\":\"1018\"}],\"left\":[{\"id\":\"1015\"}],\"plot_height\":325,\"plot_width\":325,\"renderers\":[{\"id\":\"1041\"}],\"title\":{\"id\":\"1355\"},\"toolbar\":{\"id\":\"1027\"},\"x_range\":{\"id\":\"1003\"},\"x_scale\":{\"id\":\"1007\"},\"y_range\":{\"id\":\"1005\"},\"y_scale\":{\"id\":\"1009\"}},\"id\":\"1002\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"axis\":{\"id\":\"1011\"},\"grid_line_color\":null,\"ticker\":null},\"id\":\"1014\",\"type\":\"Grid\"},{\"attributes\":{\"data_source\":{\"id\":\"1166\"},\"glyph\":{\"id\":\"1167\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1168\"},\"selection_glyph\":null,\"view\":{\"id\":\"1170\"}},\"id\":\"1169\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"label\":{\"value\":\"#3f0914\"},\"renderers\":[{\"id\":\"1236\"},{\"id\":\"1263\"}]},\"id\":\"1259\",\"type\":\"LegendItem\"},{\"attributes\":{\"source\":{\"id\":\"1233\"}},\"id\":\"1237\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1349\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"data_source\":{\"id\":\"1260\"},\"glyph\":{\"id\":\"1261\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1262\"},\"selection_glyph\":null,\"view\":{\"id\":\"1264\"}},\"id\":\"1263\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"end\":1.1,\"start\":-1.1},\"id\":\"1003\",\"type\":\"Range1d\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]},\"y\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]}},\"selected\":{\"id\":\"1185\"},\"selection_policy\":{\"id\":\"1184\"}},\"id\":\"1166\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"source\":{\"id\":\"1166\"}},\"id\":\"1170\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1258\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"1009\",\"type\":\"LinearScale\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"#044032\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1168\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1016\",\"type\":\"BasicTicker\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]},\"y\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]}},\"selected\":{\"id\":\"1207\"},\"selection_policy\":{\"id\":\"1206\"}},\"id\":\"1186\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1257\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1185\",\"type\":\"Selection\"},{\"attributes\":{\"fill_color\":{\"value\":\"#902a42\"},\"line_color\":{\"value\":\"#902a42\"},\"size\":{\"units\":\"screen\",\"value\":3},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1187\",\"type\":\"Circle\"},{\"attributes\":{\"callback\":null,\"tooltips\":\"\\n            <div>\\n                <div>\\n                    <span style=\\\"font-size:15px; font-weight:bold; color:midnightblue;\\\">@palette</span> <br>\\n                    <span style=\\\"font-size:12px; font-weight:bold; color:lapisblue;\\\">(@rgb)</span> <br>\\n                </div>\\n            </div>\\n            \"},\"id\":\"1026\",\"type\":\"HoverTool\"},{\"attributes\":{\"axis\":{\"id\":\"1015\"},\"dimension\":1,\"grid_line_color\":null,\"ticker\":null},\"id\":\"1018\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1106\",\"type\":\"HelpTool\"},{\"attributes\":{\"client_comm_id\":\"c66d22363b784eb4b4301b6bf59568a7\",\"comm_id\":\"01c1056c4a954cc69991def514152cea\",\"plot_id\":\"1352\"},\"id\":\"1582\",\"type\":\"panel.models.comm_manager.CommManager\"},{\"attributes\":{\"end_angle\":{\"expr\":{\"id\":\"1036\"},\"units\":\"rad\"},\"fill_color\":{\"field\":\"palette\"},\"line_color\":{\"value\":\"white\"},\"radius\":{\"units\":\"data\",\"value\":1},\"start_angle\":{\"expr\":{\"id\":\"1035\"},\"units\":\"rad\"},\"x\":{\"value\":0},\"y\":{\"value\":0}},\"id\":\"1039\",\"type\":\"Wedge\"},{\"attributes\":{},\"id\":\"1105\",\"type\":\"ResetTool\"},{\"attributes\":{\"end_angle\":{\"expr\":{\"id\":\"1036\"},\"units\":\"rad\"},\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"field\":\"palette\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"white\"},\"radius\":{\"units\":\"data\",\"value\":1},\"start_angle\":{\"expr\":{\"id\":\"1035\"},\"units\":\"rad\"},\"x\":{\"value\":0},\"y\":{\"value\":0}},\"id\":\"1040\",\"type\":\"Wedge\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"1067\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"children\":[{\"id\":\"1084\"}],\"margin\":[0,0,0,0],\"name\":\"Row00017\"},\"id\":\"1392\",\"type\":\"Row\"},{\"attributes\":{},\"id\":\"1104\",\"type\":\"SaveTool\"},{\"attributes\":{\"data_source\":{\"id\":\"1037\"},\"glyph\":{\"id\":\"1039\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1040\"},\"selection_glyph\":null,\"view\":{\"id\":\"1042\"}},\"id\":\"1041\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]},\"y\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[500]}},\"selected\":{\"id\":\"1128\"},\"selection_policy\":{\"id\":\"1127\"}},\"id\":\"1115\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"source\":{\"id\":\"1037\"}},\"id\":\"1042\",\"type\":\"CDSView\"},{\"attributes\":{\"children\":[{\"id\":\"1002\"},{\"id\":\"1044\"}],\"margin\":[0,0,0,0],\"name\":\"Column00012\"},\"id\":\"1353\",\"type\":\"Column\"},{\"attributes\":{},\"id\":\"1023\",\"type\":\"ResetTool\"},{\"attributes\":{\"children\":[{\"id\":\"1391\"},{\"id\":\"1392\"}],\"margin\":[0,0,0,0],\"name\":\"Column00020\"},\"id\":\"1390\",\"type\":\"Column\"},{\"attributes\":{\"source\":{\"id\":\"1077\"}},\"id\":\"1082\",\"type\":\"CDSView\"},{\"attributes\":{\"text\":\"\"},\"id\":\"1121\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1024\",\"type\":\"HelpTool\"},{\"attributes\":{\"field\":\"angle\",\"include_zero\":true},\"id\":\"1035\",\"type\":\"CumSum\"},{\"attributes\":{\"margin\":[3,4,3,4],\"min_width\":400,\"options\":[\"points\",\"lines\",\"scatter\"],\"value\":\"points\",\"width\":400},\"id\":\"1391\",\"type\":\"Select\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"1107\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"children\":[{\"id\":\"1353\"},{\"id\":\"1390\"}],\"margin\":[0,0,0,0],\"name\":\"Row00021\"},\"id\":\"1352\",\"type\":\"Row\"},{\"attributes\":{},\"id\":\"1101\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"1022\",\"type\":\"SaveTool\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"1025\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"text\":\"\"},\"id\":\"1355\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1051\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1066\",\"type\":\"HelpTool\"},{\"attributes\":{\"end\":60,\"start\":-60},\"id\":\"1047\",\"type\":\"Range1d\"},{\"attributes\":{\"formatter\":{\"id\":\"1375\"},\"ticker\":{\"id\":\"1054\"},\"visible\":false},\"id\":\"1053\",\"type\":\"LinearAxis\"},{\"attributes\":{\"formatter\":{\"id\":\"1377\"},\"ticker\":{\"id\":\"1058\"},\"visible\":false},\"id\":\"1057\",\"type\":\"LinearAxis\"},{\"attributes\":{\"data_source\":{\"id\":\"1077\"},\"glyph\":{\"id\":\"1079\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1080\"},\"selection_glyph\":null,\"view\":{\"id\":\"1082\"}},\"id\":\"1081\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1054\",\"type\":\"BasicTicker\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"field\":\"palette\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"field\":\"palette\"},\"size\":{\"units\":\"screen\",\"value\":50.0},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1080\",\"type\":\"Square\"},{\"attributes\":{},\"id\":\"1049\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1357\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1123\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1062\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"autohide\":true,\"tools\":[{\"id\":\"1101\"},{\"id\":\"1102\"},{\"id\":\"1103\"},{\"id\":\"1104\"},{\"id\":\"1105\"},{\"id\":\"1106\"}]},\"id\":\"1108\",\"type\":\"Toolbar\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"autohide\":true,\"tools\":[{\"id\":\"1061\"},{\"id\":\"1062\"},{\"id\":\"1063\"},{\"id\":\"1064\"},{\"id\":\"1065\"},{\"id\":\"1066\"},{\"id\":\"1068\"}]},\"id\":\"1069\",\"type\":\"Toolbar\"},{\"attributes\":{},\"id\":\"1359\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1064\",\"type\":\"SaveTool\"},{\"attributes\":{\"click_policy\":\"hide\",\"items\":[{\"id\":\"1130\"},{\"id\":\"1165\"},{\"id\":\"1208\"},{\"id\":\"1259\"},{\"id\":\"1318\"}],\"location\":\"top_left\"},\"id\":\"1129\",\"type\":\"Legend\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#29937b\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#29937b\"},\"size\":{\"units\":\"screen\",\"value\":3},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1117\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1065\",\"type\":\"ResetTool\"},{\"attributes\":{\"data_source\":{\"id\":\"1115\"},\"glyph\":{\"id\":\"1116\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1117\"},\"selection_glyph\":null,\"view\":{\"id\":\"1119\"}},\"id\":\"1118\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"source\":{\"id\":\"1115\"}},\"id\":\"1119\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1058\",\"type\":\"BasicTicker\"},{\"attributes\":{\"formatter\":{\"id\":\"1125\"},\"ticker\":{\"id\":\"1098\"},\"visible\":false},\"id\":\"1097\",\"type\":\"LinearAxis\"},{\"attributes\":{\"label\":{\"value\":\"#29937b\"},\"renderers\":[{\"id\":\"1118\"},{\"id\":\"1134\"}]},\"id\":\"1130\",\"type\":\"LegendItem\"},{\"attributes\":{\"fill_color\":{\"field\":\"palette\"},\"line_color\":{\"field\":\"palette\"},\"size\":{\"units\":\"screen\",\"value\":50.0},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1079\",\"type\":\"Square\"},{\"attributes\":{},\"id\":\"1087\",\"type\":\"DataRange1d\"},{\"attributes\":{\"fill_color\":{\"value\":\"#29937b\"},\"line_color\":{\"value\":\"#29937b\"},\"size\":{\"units\":\"screen\",\"value\":3},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1116\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1125\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1091\",\"type\":\"LinearScale\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"autohide\":true,\"tools\":[{\"id\":\"1019\"},{\"id\":\"1020\"},{\"id\":\"1021\"},{\"id\":\"1022\"},{\"id\":\"1023\"},{\"id\":\"1024\"},{\"id\":\"1026\"}]},\"id\":\"1027\",\"type\":\"Toolbar\"},{\"attributes\":{},\"id\":\"1089\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1061\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"1102\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"axis\":{\"id\":\"1057\"},\"dimension\":1,\"grid_line_color\":null,\"ticker\":null},\"id\":\"1060\",\"type\":\"Grid\"},{\"attributes\":{\"formatter\":{\"id\":\"1123\"},\"ticker\":{\"id\":\"1094\"},\"visible\":false},\"id\":\"1093\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1361\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"axis\":{\"id\":\"1053\"},\"grid_line_color\":null,\"ticker\":null},\"id\":\"1056\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1362\",\"type\":\"Selection\"},{\"attributes\":{\"overlay\":{\"id\":\"1067\"}},\"id\":\"1063\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1094\",\"type\":\"BasicTicker\"},{\"attributes\":{\"background_fill_color\":\"white\",\"below\":[{\"id\":\"1093\"}],\"center\":[{\"id\":\"1096\"},{\"id\":\"1100\"},{\"id\":\"1129\"}],\"left\":[{\"id\":\"1097\"}],\"plot_height\":325,\"plot_width\":450,\"renderers\":[{\"id\":\"1118\"},{\"id\":\"1134\"},{\"id\":\"1150\"},{\"id\":\"1169\"},{\"id\":\"1189\"},{\"id\":\"1212\"},{\"id\":\"1236\"},{\"id\":\"1263\"},{\"id\":\"1291\"},{\"id\":\"1322\"}],\"title\":{\"id\":\"1121\"},\"toolbar\":{\"id\":\"1108\"},\"x_range\":{\"id\":\"1085\"},\"x_scale\":{\"id\":\"1089\"},\"y_range\":{\"id\":\"1087\"},\"y_scale\":{\"id\":\"1091\"}},\"id\":\"1084\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"axis\":{\"id\":\"1097\"},\"dimension\":1,\"grid_line_color\":null,\"ticker\":null},\"id\":\"1100\",\"type\":\"Grid\"},{\"attributes\":{\"callback\":null,\"tooltips\":\"\\n            <div>\\n                <div>\\n                    <span style=\\\"font-size:15px; font-weight:bold; color:midnightblue;\\\">@palette</span> <br>\\n                    <span style=\\\"font-size:12px; font-weight:bold; color:lapisblue;\\\">(@rgb)</span> <br>\\n                </div>\\n            </div>\\n            \"},\"id\":\"1068\",\"type\":\"HoverTool\"},{\"attributes\":{\"overlay\":{\"id\":\"1107\"}},\"id\":\"1103\",\"type\":\"BoxZoomTool\"},{\"attributes\":{\"axis\":{\"id\":\"1093\"},\"grid_line_color\":null,\"ticker\":null},\"id\":\"1096\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1085\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1098\",\"type\":\"BasicTicker\"}],\"root_ids\":[\"1352\",\"1582\",\"1718\"]},\"title\":\"Bokeh Application\",\"version\":\"2.2.3\"}};\n",
       "    var render_items = [{\"docid\":\"1fa9fa17-5aae-4216-aa38-8a66ff4a1e6c\",\"root_ids\":[\"1352\"],\"roots\":{\"1352\":\"f8b6366c-8802-4301-8afa-531a8670d572\"}}];\n",
       "    root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "  }\n",
       "  if (root.Bokeh !== undefined && root.Bokeh.Panel !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined && root.Bokeh.Panel !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else if (document.readyState == \"complete\") {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);</script>"
      ],
      "text/plain": [
       "Row\n",
       "    [0] Column\n",
       "        [0] Bokeh(Figure)\n",
       "        [1] Bokeh(Figure)\n",
       "    [1] Column\n",
       "        [0] Select(margin=[3, 4], options=['points', 'lines', ...], value='points', width=400)\n",
       "        [1] ParamFunction(function)"
      ]
     },
     "execution_count": 10,
     "metadata": {
      "application/vnd.holoviews_exec.v0+json": {
       "id": "1352"
      }
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ct.palplot(ct.pepo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's figure out how it actually works!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
