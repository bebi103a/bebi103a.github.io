{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# E1. To be completed after lesson 3\n",
    "\n",
    "<hr>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 1.1\n",
    "\n",
    "Describe in words the difference between a mutable and immutable object.\n",
    "\n",
    "<br />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 1.2\n",
    "\n",
    "**a)** Describe in words the difference between the `==` operator and the `is` operator.\n",
    "\n",
    "**b)** Why should you not use the `==` operator to compare two `float`s?\n",
    "\n",
    "<br />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 1.3\n",
    "\n",
    "*Do this before Exercise 1.4.* Without running the code, write what will be printed for the following Python codes.\n",
    "\n",
    "**a)**\n",
    "```python\n",
    "my_list = [1, 2, 3]\n",
    "my_list[2] = \"four\"\n",
    "\n",
    "print(my_list)\n",
    "```\n",
    "\n",
    "<hr>\n",
    "<br />\n",
    "\n",
    "**b)**\n",
    "```python\n",
    "a = 5\n",
    "b = 2\n",
    "a = b\n",
    "\n",
    "print(a, b)\n",
    "```\n",
    "\n",
    "<hr>\n",
    "<br />\n",
    "\n",
    "\n",
    "**c)**\n",
    "```python\n",
    "def first_element_103(x):\n",
    "    x[0] = 103\n",
    "    \n",
    "x = [1, 2, 3]\n",
    "\n",
    "first_element_103(x)\n",
    "\n",
    "print(x)\n",
    "```\n",
    "\n",
    "<hr>\n",
    "<br />\n",
    "\n",
    "\n",
    "\n",
    "**d)**\n",
    "```python\n",
    "def add_103(x):\n",
    "    x += 103\n",
    "    \n",
    "x = 4\n",
    "\n",
    "add_103(x)\n",
    "\n",
    "print(x)\n",
    "```\n",
    "\n",
    "<hr>\n",
    "<br />\n",
    "\n",
    "\n",
    "**e)**\n",
    "```python\n",
    "def add_103(x):\n",
    "    return x + 103\n",
    "    \n",
    "x = 4\n",
    "\n",
    "x = add_103(x)\n",
    "\n",
    "print(x)\n",
    "```\n",
    "\n",
    "<hr>\n",
    "<br />\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "**f)**\n",
    "```python\n",
    "def append_103(x):\n",
    "    x.append(103)\n",
    "    \n",
    "a = [1, 2, 3]\n",
    "b = a\n",
    "\n",
    "append_103(b)\n",
    "\n",
    "print(a)\n",
    "```\n",
    "\n",
    "<hr>\n",
    "<br />\n",
    "\n",
    "\n",
    "**g)**\n",
    "```python\n",
    "add_three_numbers = lambda x, y, z: x + y + z\n",
    "\n",
    "print(add_three_numbers(*(5, 6, 7)))\n",
    "```\n",
    "\n",
    "<hr>\n",
    "<br />\n",
    "\n",
    "\n",
    "**h)**\n",
    "```python\n",
    "print([i for i in range(1, 10) if i % 2])\n",
    "```\n",
    "\n",
    "\n",
    "<hr>\n",
    "<br />\n",
    "\n",
    "\n",
    "**i)** As we will learn when we learn about style, you should not write code like this example; it's overly tricky to read. But it will help see if you understand how list comprehensions work.\n",
    "```python\n",
    "print([i if i % 3 == 0 else i**2 for i in range(1, 10) if i % 2])\n",
    "```\n",
    "\n",
    "\n",
    "<hr>\n",
    "<br />\n",
    "\n",
    "**j)** This one is tricky. Don't worry if you have trouble with this.\n",
    "\n",
    "```python\n",
    "def append_103(x=[]):\n",
    "    x.append(103)\n",
    "\n",
    "    return x\n",
    "\n",
    "append_103()\n",
    "append_103()\n",
    "append_103()\n",
    "\n",
    "print(append_103())\n",
    "```\n",
    "\n",
    "<br />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 1.4\n",
    "\n",
    "Check your work from Exercise 1.3 by running the codes in code cells. *Do not* change your answers to Exercise 1.3 after doing this.\n",
    "\n",
    "<br />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 1.5\n",
    "\n",
    "What is the difference between a key and a value in a dictionary?\n",
    "\n",
    "<br />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 1.6\n",
    "\n",
    "Can a dictionary have duplicate keys? Can it have duplicate values?\n",
    "\n",
    "<br />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise 1.7\n",
    "\n",
    "Write down any questions or points of confusion that you have."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "def add_103(x):\n",
    "    x += 103\n",
    "\n",
    "x = 4\n",
    "\n",
    "add_103(x)\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_return_value = add_103(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(my_return_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140539926695152\n",
      "140539926694384\n"
     ]
    }
   ],
   "source": [
    "def add_103(x):\n",
    "    print(id(x))\n",
    "    \n",
    "    x += 103\n",
    "    \n",
    "    print(id(x))\n",
    "\n",
    "    return x\n",
    "\n",
    "x = 400\n",
    "\n",
    "x = add_103(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4373822048\n",
      "4373825344\n"
     ]
    }
   ],
   "source": [
    "x = 4\n",
    "print(id(x))\n",
    "\n",
    "x = add_103(x)\n",
    "print(id(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 103]\n"
     ]
    }
   ],
   "source": [
    "def append_103(x):\n",
    "    x.append(103)\n",
    "\n",
    "a = [1, 2, 3]\n",
    "b = a\n",
    "\n",
    "append_103(b)\n",
    "\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a is b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18\n"
     ]
    }
   ],
   "source": [
    "add_three_numbers = lambda x, y, z: x + y + z\n",
    "\n",
    "print(add_three_numbers(*(5, 6, 7)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "add_three_numbers(*([1], [2], [3]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_three_numbers(x, y, z):\n",
    "    return x + y + z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bool('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[103]\n"
     ]
    }
   ],
   "source": [
    "def append_103(x=[]):\n",
    "    x.append(103)\n",
    "\n",
    "    return x\n",
    "\n",
    "append_103([])\n",
    "append_103([])\n",
    "append_103([])\n",
    "\n",
    "print(append_103([]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'x' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/tj/4wnqnhc13cl70g85k6w4kbh80000gn/T/ipykernel_55106/32546335.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'x' is not defined"
     ]
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[103, 103, 103, 103]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[103, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "def first_element_103(x):\n",
    "    x[0] = 103\n",
    "\n",
    "x = [1, 2, 3]\n",
    "\n",
    "first_element_103(x)\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "return_value = first_element_103(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(return_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "return_value is None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140333373286256\n",
      "140333373286224\n",
      "503\n"
     ]
    }
   ],
   "source": [
    "def add_103(x):\n",
    "    return x + 103\n",
    "\n",
    "x = 400\n",
    "print(id(x))\n",
    "\n",
    "x = add_103(x)\n",
    "print(id(x))\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 103]\n"
     ]
    }
   ],
   "source": [
    "def append_103(x):\n",
    "    x.append(103)\n",
    "\n",
    "a = [1, 2, 3]\n",
    "b = a\n",
    "\n",
    "append_103(b)\n",
    "\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a is b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(140333359935232, 140333359935232)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "id(a), id(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18\n"
     ]
    }
   ],
   "source": [
    "add_three_numbers = lambda x, y, z: x + y + z\n",
    "\n",
    "print(add_three_numbers(*(5, 6, 7)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function __main__.<lambda>(x, y, z)>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def add_three_numbers(x, y, z):\n",
    "    return x + y + z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bool([])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 3, 5, 7, 9]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(range(1, 10, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 25, 49, 9]\n"
     ]
    }
   ],
   "source": [
    "print([i if i % 3 == 0 else i**2 for i in range(1, 10) if i % 2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "140670955060848"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 257\n",
    "id(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "140670955059248"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x += 9\n",
    "id(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[103, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "def first_element_103(x):\n",
    "    x[0] = 103\n",
    "\n",
    "x = [1, 2, 3]\n",
    "\n",
    "first_element_103(x)\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "return_value = first_element_103(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(return_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4304173664\n",
      "4304176960\n",
      "4304173664\n"
     ]
    }
   ],
   "source": [
    "def add_103(x):\n",
    "    x = x + 103\n",
    "    print(id(x))\n",
    "    \n",
    "x = 4\n",
    "print(id(x))\n",
    "\n",
    "add_103(x)\n",
    "\n",
    "print(id(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "140670955058928\n",
      "140670955058288\n"
     ]
    }
   ],
   "source": [
    "def add_103(x):\n",
    "    return x + 103\n",
    "\n",
    "x = 400\n",
    "print(id(x))\n",
    "\n",
    "x = add_103(x)\n",
    "\n",
    "print(id(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 103]\n"
     ]
    }
   ],
   "source": [
    "def append_103(x):\n",
    "    x.append(103)\n",
    "\n",
    "a = [1, 2, 3]\n",
    "b = a\n",
    "\n",
    "append_103(b)\n",
    "\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 103]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a is b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18\n"
     ]
    }
   ],
   "source": [
    "add_three_numbers = lambda x, y, z: x + y + z\n",
    "\n",
    "print(add_three_numbers(*(5, 6, 7)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_three_numbers(x, y, z):\n",
    "    return x, y, z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function __main__.<lambda>(x, y, z)>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "add_three_numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3252"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "add_three_numbers(3200, 50, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bool(['a', 'list'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3 % 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 5, 7, 9]\n"
     ]
    }
   ],
   "source": [
    "print([i for i in range(1, 10) if i % 2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[103, 103, 103, 103]\n"
     ]
    }
   ],
   "source": [
    "def append_103(x=[]):\n",
    "    x.append(103)\n",
    "\n",
    "    return x\n",
    "\n",
    "append_103()\n",
    "append_103()\n",
    "append_103()\n",
    "\n",
    "print(append_103())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
