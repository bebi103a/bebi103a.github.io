{"cells": [{"cell_type": "markdown", "metadata": {}, "source": ["# Homework 6.1 [SOLO]: Marginalization by sampling (30 pts)\n", "\n", "<hr>"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Recalling the introductory lecture on probability, **marginalization** is the process by which a variable is removed from a joint distribution. If $P(\\{A_i\\}, B)$ is the joint probability of some set of \"A\" events indexed with $i$, then we obtain the probability of event $B$ by marginalizing over the A events. This amounts to summing.\n", "\n", "\\begin{align}\n", "P(B) = \\sum_i P(\\{A_i\\}, B).\n", "\\end{align}\n", "\n", "This also works for probability density functions. If $f(x_1, x_2)$ is the joint probability density function for $x_1$ and $x_2$, then\n", "\n", "\\begin{align}\n", "f(x_1) = \\int\\mathrm{d}x_2\\,f(x_1, x_2).\n", "\\end{align}\n", "\n", "Imagine we have three variables, $x_1$, $x_2$, and $x_3$ that are distributed according to a trivariate Normal.\n", "\n", "\\begin{align}\n", "x_1, x_2, x_3 \\sim \\text{Norm}(\\boldsymbol{\\mu}, \\mathsf{\\Sigma}),\n", "\\end{align}\n", "\n", "where $\\boldsymbol{\\mu} = (\\mu_1, \\mu_2, \\mu_3)^\\mathsf{T}$ is the trivariate location parameter and\n", "\n", "\\begin{align}\n", "\\mathsf{\\Sigma} = \\begin{pmatrix}\n", "\\Sigma_{11} & \\Sigma_{12} & \\Sigma_{13} \\\\\n", "\\Sigma_{12} & \\Sigma_{22} & \\Sigma_{23} \\\\\n", "\\Sigma_{13} & \\Sigma_{23} & \\Sigma_{33}\n", "\\end{pmatrix}\n", "\\end{align}\n", "\n", "is the symmetric positive definite scale parameter, called a **covariance matrix**.\n", "\n", "If we want to know the joint distribution of $x_1, x_3$, we can do it the \"hard\" way by directly computing the integral\n", "\n", "\\begin{align}\n", "f(x_1, x_3) = \\int\\mathrm{d}x_2\\,f(x_1, x_2, x_3).\n", "\\end{align}\n", "\n", "You can perform this integration if you like (but you don't have to). You would find that\n", "\n", "\\begin{align}\n", "x_1, x_3 \\sim \\text{Norm}\\left(\\begin{pmatrix}\\mu_1, \\mu_3\\end{pmatrix}, \\begin{pmatrix}\n", "\\Sigma_{11} & \\Sigma_{13} \\\\\n", "\\Sigma_{13} & \\Sigma_{33}\n", "\\end{pmatrix}\\right).\n", "\\end{align}\n", "\n", "The marginal distribution is Normal again, just with the marginalized variable removed. This is true for a multivariate Normal distribution, but is not generally true. Similarly, if we want the distribution for $x_1$, we can marginalize out $x_3$.\n", "\n", "\\begin{align}\n", "f(x_1) = \\int\\mathrm{d}x_2\\int\\mathrm{d}x_3\\,f(x_1, x_2, x_3).\n", "\\end{align}\n", "\n", "The result is\n", "\n", "\\begin{align}\n", "x_1 \\sim \\text{Norm}(\\mu_1, \\Sigma_{11}),\n", "\\end{align}\n", "\n", "though we usually write this in terms of a standard deviation and not variance, where $\\sigma_1^2 = \\Sigma_{11}$.\n", "\n", "It takes some mathematical grunge to arrive at these results, but we can get a similar result by sampling. Specifically, **if you can get samples out of a multivariate distribution, you get samples out of a marginalized distribution by simply ignoring the samples of the variables you are marginalizing out.** We will use this fact over and over (and over and over) again in the next term of the class. You will demonstrate it to yourself for the case of the trivariate Normal in this problem.\n", "\n", "**a)** Draw 2,000 samples for $\\mathbf{x} = (x_1, x_2, x_3)$ out of a trivariate Normal distribution. You can refer to the [Distribution Explorer](https://distribution-explorer.github.io/multivariate_continuous/multivariate_normal.html) for direction on how to do that. For your choice of parameters, use\n", "\n", "\\begin{align}\n", "&\\boldsymbol{\\mu} = (10, 15, 25)^\\mathsf{T},\\\\[1em]\n", "&\\mathsf{\\Sigma} = \\begin{pmatrix}\n", "6 & -7 & -5 \\\\\n", "-7 & 13 & 11 \\\\\n", "-5 & 11 & 10\n", "\\end{pmatrix}.\n", "\\end{align}\n", "\n", "**b)** Plot the samples of $x_1$ as an ECDF. Overlay the CDF of the theoretical distribution for $f(x_1)$. Do they match?\n", "\n", "<!-- **c)** Plot the samples of $x_1$ and $x_3$ together. Overlay a contour plot of the theoretical joint PDF $f(x_1, x_3)$. You can use the `bebi103.viz.contour()` function if you like. Do these match up? -->"]}, {"cell_type": "markdown", "metadata": {}, "source": ["<br />"]}], "metadata": {"anaconda-cloud": {}, "kernelspec": {"display_name": "Python 3 (ipykernel)", "language": "python", "name": "python3"}, "language_info": {"codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.8.12"}}, "nbformat": 4, "nbformat_minor": 4}